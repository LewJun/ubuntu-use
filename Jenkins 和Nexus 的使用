# Jenkins 的使用
[TOC]

## 安装
```
在Jenkins官网下载war包，直接拷贝到tomcat的webapps下启动。
Jenkins initial setup is required. An admin user has been created and a password generated.
Please use the following password to proceed to installation:

3b0bb5027e0b4a7bbfd86620b2a71195

This may also be found at: /root/.jenkins/secrets/initialAdminPassword
```

## 配置
* 访问：http://localhost:8081/jenkins
* 输入上面的密码：3b0bb5027e0b4a7bbfd86620b2a71195
* 安装推荐的插件
* 创建第一个管理员用户
  * 用户名  LewJun
  * 密码    lewjun123456
  * 确认密码  lewjun123456
  * 全名    LewJun
  * 电子邮件地址  lewjun072@gmail.com
* 实例配置
  * http://localhost:8081/jenkins

## 安装maven插件

```
Maven Integration
maven配置
http://localhost:8081/jenkins/configureTools/
```

## 创建任务
```
histruts1【构建一个maven项目】
源码管理
Git
https://github.com/LewJun/histruts1
Pre Steps 配置maven版本
立即构建
```
## 在构建的时候遇到的问题：
* [ERROR] Unknown lifecycle phase "mvn".
  * 解决：Pre Steps 配置maven版本
  * Root POM	pom.xml Goals and options	clean install  -Pdev
Help for feature: Goals and options

* [ERROR] No goals have been specified for this build. You must specify a valid lifecycle phase or a goal in the format
  * 解决：在<build>中添加<defaultGoal>compile</defaultGoal>
*  Failure to find com.oracle:ojdbc14:jar:10.2.0.4.0 in http://maven.aliyun.com/nexus/content/groups/public was cached in the local repository
  *  使用私服nexus解决
# 安装 nexus
## 下载
http://sonatype-download.global.ssl.fastly.net/nexus/oss/nexus-2.11.4-01-bundle.tar.gz
## 解压
tar -xzvf nexus-2.11.4-01-bundle.tar.gz
## 修改配置
* nexus-2.11.4-01/bin/nexus
  * RUN_AS_USER=root
* nexus-2.11.4-01/bin/jsw/conf/wrapper.conf
  * wrapper.java.command=/usr/share/jdk/jdk1.8.0_181/bin/java
* nexus-2.11.4-01/conf/nexus.properties
  * application-port=8091
  * application-host=127.0.0.1

## 启动

```sudo ./bin/nexus start
需要输入root的密码
启动完成后检查是否已经成功
lsof -t -i:8091
http://localhost:8091/nexus
```

## 登录
admin/admin123

## 配置

* 点击Repositories，将列表中所有Type为proxy 的项目的 Configuration 中的 Download Remote Indexes 设置为True
* 将Releases仓库的Deployment Policy设置为 Allow ReDeploy

## 3rd part

Artifact Upload

```
GAV Definition: GAV Parameters
Group: com.oracle
Artifact: ojdbc14
Version: 10.2.0.4.0
Packaging: jar
Select Artifact(s) to Upload...
Add Artifact
Upload Artifact(s)
```

## 配置本地项目引用私服
* 自动发布构件到远程仓库，在工程pom.xml中添加
  ``` xml
  <distributionManagement>
    <repository>
        <id>releases</id><!--这个ID需要与你的release仓库的Repository ID一致-->
        <url>http://127.0.0.1:8091/nexus/content/repositories/releases</url>
    </repository>
    <snapshotRepository>
        <id>snapshots</id><!--这个ID需要与你的snapshots仓库的Repository ID一致-->
        <url>http://127.0.0.1:8091/nexus/content/repositories/snapshots</url>
    </snapshotRepository>
  </distributionManagement>
  ```
  如上配置表示打包的时候例如`mvn clean install deploy -Pdev` 快照包（0.1-snapshot）将被上传到repositories/snapshots，而正式包将被上传到repositories/releases
* 修改本地$MAVEN_HOME\conf\settings.xml，添加如下配置
  ``` xml
  <servers>
    <server>
        <id>releases</id>
        <username>admin</username>
        <password>admin123</password>
    </server>
    <server>
        <id>snapshots</id>
        <username>admin</username>
        <password>admin123</password>
    </server>
  </servers>
  ```

## 配置Maven从Nexus下载构件

```xml
<profile>
  <id>my-nexus</id><!--指定Nexus的构件仓库-->
  <repositories>
    <repository>
        <id>public</id>
        <name>Team Maven Repository</name>
        <url>http://127.0.0.1:8091/nexus/content/groups/public/</url>
        <releases><enabled>true</enabled></releases>
        <snapshots><enabled>true</enabled></snapshots>
    </repository>

    <repository>
        <id>releases</id>
        <name>Team Maven Repository</name>
        <url>http://127.0.0.1:8091/nexus/content/repositories/releases/</url>
        <releases><enabled>true</enabled></releases>
        <snapshots><enabled>true</enabled></snapshots>
    </repository>

    <repository>
        <id>snapshots</id>
        <name>Team Maven Repository</name>
        <url>http://127.0.0.1:8091/nexus/content/repositories/snapshots/</url>
        <releases><enabled>true</enabled></releases>
        <snapshots><enabled>true</enabled></snapshots>
    </repository>

    <repository>
        <id>thirdparty</id>
        <name>Team Maven Repository</name>
        <url>http://127.0.0.1:8091/nexus/content/repositories/thirdparty/</url>
        <releases><enabled>true</enabled></releases>
        <snapshots><enabled>true</enabled></snapshots>
    </repository>
  </repositories>
 
  <!--指定Nexus的插件仓库-->
  <pluginRepositories>
    <pluginRepository>
        <id>public</id>
        <name>Team Maven Repository</name>
        <url>http://127.0.0.1:8091/nexus/content/groups/public/</url>
        <releases><enabled>true</enabled></releases>
        <snapshots><enabled>true</enabled></snapshots>
    </pluginRepository>

    <pluginRepository>
        <id>releases</id>
        <name>Team Maven Repository</name>
        <url>http://127.0.0.1:8091/nexus/content/repositories/releases/</url>
        <releases><enabled>true</enabled></releases>
        <snapshots><enabled>true</enabled></snapshots>
    </pluginRepository>

    <pluginRepository>
        <id>snapshots</id>
        <name>Team Maven Repository</name>
        <url>http://127.0.0.1:8091/nexus/content/repositories/snapshots/</url>
        <releases><enabled>true</enabled></releases>
        <snapshots><enabled>true</enabled></snapshots>
    </pluginRepository>

    <pluginRepository>
        <id>thirdparty</id>
        <name>Team Maven Repository</name>
        <url>http://127.0.0.1:8091/nexus/content/repositories/thirdparty/</url>
        <releases><enabled>true</enabled></releases>
        <snapshots><enabled>true</enabled></snapshots>
    </pluginRepository>
  </pluginRepositories>
</profile>

<!-- 激活 -->
<activeProfiles>
  <activeProfile>my-nexus</activeProfile>
</activeProfiles>

```


## 自动部署到远程服务器
### 下载插件
> publish ssh over

### 配置 Publish over SSH
> 系统设置 > Publish over SSH
> SSH Servers 填写
```
Name	127.0.0.1
 	Hostname	127.0.0.1
 	Username	lewjun
 	Remote Directory	/home/lewjun
Help for feature: Remote Directory
勾选：Use password authentication, or use a different key
 	Passphrase / Password	输入密码

Test Connection 
Success
```

### 构建后操作
Send build artifacts over SSH

